import app.keyboards as kb
from aiogram import Bot, types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ContentType, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
from db_conf import db
from sqlalchemy.exc import IntegrityError
from asyncpg.exceptions import UniqueViolationError
from middlewares import get_file_hash_from_telegram

from dotenv import load_dotenv
import os
get = os.getenv

load_dotenv()

bot = Bot(token=get('BOT_TOKEN'))

upload_file_router = Router()

class Form(StatesGroup): 
    file = State()
    filename = State()
    create_new_folder = State()
    choose_folder = State()
    folder = State()


@upload_file_router.message(Command("upload_file"))
async def on_start(message: types.Message, state: FSMContext):
    await message.answer('–í–Ω–µ—Å–∏—Ç–µ —Ñ–∞–π–ª')
    await state.set_state(Form.file)

@upload_file_router.message(F.content_type.in_([ContentType.PHOTO, ContentType.DOCUMENT, ContentType.AUDIO, ContentType.VIDEO]), Form.file)
async def get_user_file(message: Message, state: FSMContext):

    if message.document:
        file_id = message.document.file_id
        file_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_type = "—Ñ–æ—Ç–æ"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.video:
        file_id = message.video.file_id
        file_type = "–≤–∏–¥–µ–æ"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.audio:
        file_id = message.audio.file_id
        file_type = "–∞—É–¥–∏–æ"
        await state.update_data(file_id=file_id, file_type=file_type)
    else:
        await message.answer("‚ùó –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return

    await message.answer("–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup= kb.folders_choice)
    await state.set_state(Form.folder)

@upload_file_router.callback_query(F.data == "create_folder")
async def callback_create_folder(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:")
    await state.set_state(Form.create_new_folder)

@upload_file_router.message(Form.create_new_folder)
async def create_folder(message: Message, state: FSMContext):
    user_id = message.from_user.id
    foldername = message.text 

    await db.create_new_folder(user_id, foldername)
    await state.update_data(selected_folder=foldername)
    
    await message.answer(f"‚úÖ –ü–∞–ø–∫–∞ <b>{foldername}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", parse_mode="HTML")

    folders = await db.get_folders_by_id(user_id)
    
    if folders:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:", reply_markup= await kb.available_folders(folders))
        await state.set_state(Form.choose_folder)
    else:
        await message.answer("‚ùó –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫.")

@upload_file_router.callback_query(F.data == "choose_folder")
async def callback_folders(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    folders = await db.get_folders_by_id(user_id)

    if not folders:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é!")
        return

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—ÉüìÇ:", reply_markup= await kb.available_folders(folders))
    await callback.answer()

    await state.set_state(Form.choose_folder)

@upload_file_router.callback_query(F.data.startswith("folder_"), Form.choose_folder)
async def folder_selected(callback: CallbackQuery, state: FSMContext):
    folder_name = callback.data.split("_", 1)[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏–∑ callback_data

    await state.update_data(selected_folder=folder_name)

    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–ø–∫—É: <b>{folder_name}</b>", parse_mode="HTML")

    data = await state.get_data()
    user_id = callback.from_user.id
    file_id = data.get("file_id")
    folder = data.get("selected_folder")
    file_type = data.get("file_type")

    file_hash = await get_file_hash_from_telegram(file_id)

    if not file_id:
        await callback.message.answer("‚ùó –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã.")
        await state.set_state(Form.file)
        return

    existing_folder = await db.unique_error_handler(user_id, file_hash)

    try:
        if file_id:
            await db.add_file(user_id, file_id, folder, file_hash, file_type)
            await callback.message.answer(f"üìÇ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–ø–∫—É <b>{folder}</b>!", parse_mode="HTML")
            await state.clear()
        else:
            await state.set_state(Form.file)
    except IntegrityError as e:
        if isinstance(e.orig, UniqueViolationError):
            await callback.message.answer("‚ùó –§–∞–π–ª —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        else:
            await callback.message.answer(f"‚ùó –≠—Ç–æ—Ç —Ñ–∞–π–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–ø–∫—É <b>{existing_folder}</b>.",parse_mode="HTML")
        await state.clear()

    except Exception as e:
        await callback.message.answer(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()